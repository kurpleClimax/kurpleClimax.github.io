name: New Code Freeze
on:
  workflow_dispatch:

permissions: {}

env:
    GIT_COMMITTER_NAME: 'WooCommerce Bot'
    GIT_COMMITTER_EMAIL: 'no-reply@woocommerce.com'
    GIT_AUTHOR_NAME: 'WooCommerce Bot'
    GIT_AUTHOR_EMAIL: 'no-reply@woocommerce.com'

jobs:
  prepare-for-code-freeze:
    name: Calculate versions and confirm repo is in a good state
    runs-on: ubuntu-latest
    outputs:
      nextReleaseBranch: ${{ steps.calculate-versions.outputs.nextReleaseBranch }}
      nextReleaseVersion: ${{ steps.calculate-versions.outputs.nextReleaseVersion }}
      nextTrunkVersion: ${{ steps.calculate-versions.outputs.nextTrunkVersion }}
    steps:
      - name: Verify no PRs open by the github-actions bot are open
        uses: actions/github-script@v6
        with:
          script: |
            const automatedPRs = await github.rest.search.issuesAndPullRequests({
              q: `repo:${context.repo.owner}/${context.repo.repo} is:pr is:open author:app/github-actions`,
            });

            if (automatedPRs.data.items.length > 0) {
              core.setFailed('There are PRs by the github-actions bot that are still open. Please merge or close before proceeding.');
              process.exit(1);
            }
      - name: Compute next release and dev cycle versions
        id: calculate-versions
        uses: actions/github-script@v6
        with:
          script: |
            const bumpMinorVersion = (v) => {
              const [major, minor, patch] = v.split('.').map(Number);
              return minor >= 9 ? `${major + 1}.0.0` : `${major}.${minor + 1}.0`
            };

            const currentRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const currentVersion = currentRelease.data.tag_name.replace(/[^0-9.]+/, '');
            const nextReleaseVersion = bumpMinorVersion(currentVersion);
            const nextReleaseBranch = `release/${nextReleaseVersion.slice(0, -2)}`;
            const nextTrunkVersion = bumpMinorVersion(nextReleaseVersion);

            core.setOutput('nextReleaseVersion', nextReleaseVersion);
            core.setOutput('nextReleaseBranch', nextReleaseBranch);
            core.setOutput('nextTrunkVersion', nextTrunkVersion);

  run-code-freeze:
    name: Perform code freeze
    runs-on: ubuntu-latest
    needs: prepare-for-code-freeze
    permissions:
      contents: write
      pull-requests: write
    steps:
      # Repo preparation to be able to use the monorepo-utils for the version bumps.
      - name: Checkout trunk
        uses: actions/checkout@v3
        with:
          ref: trunk
      - name: Setup PNPM
        uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d
      - name: Setup Node
        uses: actions/setup-node@64ed1c7eab4cce3362f8c340dee64e5eaeef8f7c
        with:
            node-version-file: .nvmrc
            cache: pnpm
            registry-url: 'https://registry.npmjs.org'
      - name: Install prerequisites
        run: |
            pnpm install --filter monorepo-utils --ignore-scripts
            # ignore scripts speeds up setup signficantly, but we still need to build monorepo utils
            pnpm build
        working-directory: tools/monorepo-utils

      # Actual code freeze steps.
      - name: Push frozen branch to the repo
        run: |
          # Last opportunity to bail if branch already exists.
          if [[ -n $(git ls-remote --heads origin ${{ needs.prepare-for-code-freeze.outputs.nextReleaseBranch }}) ]]; then
            echo "::error::Release branch already exists."
            exit 1
          fi
        
          git checkout trunk
          git checkout -b ${{ needs.prepare-for-code-freeze.outputs.nextReleaseBranch }}
          git push origin ${{ needs.prepare-for-code-freeze.outputs.nextReleaseBranch }}
      - name: Create next dev cycle milestone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm utils code-freeze milestone -o ${{ github.repository_owner }} -n ${{ github.event.repository.name}} -m ${{ needs.prepare-for-code-freeze.outputs.nextTrunkVersion }}
      - name: Bump versions in frozen release branch for beta.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm utils code-freeze version-bump ${{ needs.prepare-for-code-freeze.outputs.nextReleaseVersion }}-beta.1 -o ${{ github.repository_owner }} -n ${{ github.event.repository.name}} -b ${{ needs.prepare-for-code-freeze.outputs.nextReleaseBranch }}
      - name: Bump versions in trunk for next dev cycle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm utils code-freeze version-bump ${{ needs.prepare-for-code-freeze.outputs.nextTrunkVersion }}-dev -o ${{ github.repository_owner }} -n ${{ github.event.repository.name}} -b trunk

      # Notify Slack.
      - name: Notify Slack on success
        if: ${{ success() }}
        uses: archive/github-actions-slack@v2.0.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.CODE_FREEZE_BOT_TOKEN }}
          slack-channel: ${{ secrets.WOO_RELEASE_SLACK_CHANNEL }}
          slack-text: |
            :ice_cube: Code Freeze completed for `${{ needs.prepare-for-code-freeze.outputs.nextReleaseBranch }}` :checking:
            You can raise a code freeze exception if you need something to be included in this release.
          slack-optional-unfurl_links: false
          slack-optional-unfurl_media: false
